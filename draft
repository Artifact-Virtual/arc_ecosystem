Below is a focused checklist + exact commands and a ready-to-run script you can add to your repo to perform automated checks against the six core governance contracts:

Core contracts (references)

ARCGovernor
ARCTimelock
ARCProposal
ARCVoting
ARCTreasury
ARCDAO
Summary checklist (what to verify)

Roles & membership
Confirm ADMIN_ROLE, PROPOSER_ROLE, EXECUTOR_ROLE, PAUSER_ROLE holders match expected multisigs/hardware wallets.
Check role admin relationships (who can grant/revoke).
Timelock delays & windows
Verify minDelay / configured delay equals intended governance policy.
Verify gracePeriod / max delay values.
Allowlisted execution targets
Verify timelock/executor allowlist contains only approved module addresses (Treasury, Params, RWA, Grants).
Upgradeability
Detect whether contracts are proxied (EIP-1967) and whether implementations are upgradeable (UUPS / upgradeTo present).
Check proxy admin / upgrade admin ownership.
Emergency & pause controls
Confirm pause state, existence of emergency bypass, and which accounts hold emergency roles.
Proposal lifecycle parameters
Validate votingDelay, votingPeriod, proposalThreshold, quorumPercentage configured in ARCGovernor.
Event and queue state
Check timelock's queued/ready/expired operations and recent queue/execute events.
Tests & scripts
Run project scripts: health-check, status, deployment dry-run to ensure wiring matches addresses.
Exact commands to run (from repository root; Windows PowerShell or CMD)

Install & compile
npm install
npx hardhat compile
Run repository health/status scripts
npx hardhat run health-check.ts --network <network>
npx hardhat run status.ts --network <network>
(Replace <network> with e.g. base, sepolia)
Run provided check script (below) after you add it
npx hardhat run scripts/check-governance.ts --network <network>
Hardhat console quick checks
npx hardhat console --network <network>
In console (example quick checks)
const gov = await ethers.getContractAt("ARCGovernor", process.env.DAO_GOVERNOR_ADDRESS);
const ADMIN = await gov.ADMIN_ROLE(); const n = await gov.getRoleMemberCount(ADMIN);
for (let i=0;i<n;i++) console.log(await gov.getRoleMember(ADMIN,i));
const cfg = await gov.config(); console.log(cfg);
const timelock = await ethers.getContractAt("ARCTimelock", process.env.DAO_TIMELOCK_ADDRESS);
console.log("minDelay:", (await timelock.getMinDelay?.()) || (await timelock.MIN_DELAY?.()));
// Check UUPS/EIP-1967 implementation slot:
const implSlot = "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";
const implRaw = await ethers.provider.getStorageAt(process.env.DAO_GOVERNOR_ADDRESS, implSlot);
console.log("impl:", ethers.utils.getAddress("0x" + implRaw.slice(26)));

Then Run L:\worxpace\arc_ecosystem\scripts\governance-test.ts

