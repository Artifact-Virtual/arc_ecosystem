{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xDb3C3f9ECb93f3532b4FD5B050245dd2F2Eec437",
      "txHash": "0x61eb8b1b93bd0e0c839cff1b8b7ef7ee760f04edf9dd94a98fc67437b1662747",
      "kind": "uups"
    }
  ],
  "impls": {
    "2d31cea175e807bb4a61610f2551a9b2ac8c3a55b53a89a6226b9b2d786d17c6": {
      "address": "0xcd24FcDa79F189Df8A466A1D22948B59C3afa224",
      "txHash": "0x15b9ac68b31e760e639b70802533087f3e118d21d80f01e5bbcee9989ffe3a15",
      "layout": {
        "solcVersion": "0.8.21",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:40"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "151",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "152",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "153",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "154",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_struct(Counter)5881_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "204",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "205",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "_delegates",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:37"
          },
          {
            "label": "_checkpoints",
            "offset": 0,
            "slot": "255",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)2558_storage)dyn_storage)",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:38"
          },
          {
            "label": "_totalSupplyCheckpoints",
            "offset": 0,
            "slot": "256",
            "type": "t_array(t_struct(Checkpoint)2558_storage)dyn_storage",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:39"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "257",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:302"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "304",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "354",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:57"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "404",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "405",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "454",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "455",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:88"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "504",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:169"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "554",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:111"
          },
          {
            "label": "config",
            "offset": 0,
            "slot": "604",
            "type": "t_struct(Config)45584_storage",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:57"
          },
          {
            "label": "userData",
            "offset": 0,
            "slot": "607",
            "type": "t_mapping(t_address,t_struct(UserData)45596_storage)",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:67"
          },
          {
            "label": "v1Migrated",
            "offset": 0,
            "slot": "608",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:68"
          },
          {
            "label": "feeExempt",
            "offset": 0,
            "slot": "609",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:69"
          },
          {
            "label": "userStakes",
            "offset": 0,
            "slot": "610",
            "type": "t_mapping(t_address,t_array(t_struct(Stake)45618_storage)dyn_storage)",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:79"
          },
          {
            "label": "totalStaked",
            "offset": 0,
            "slot": "611",
            "type": "t_uint256",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:80"
          },
          {
            "label": "maxFlashLoan",
            "offset": 0,
            "slot": "612",
            "type": "t_uint256",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:83"
          },
          {
            "label": "yieldReserve",
            "offset": 0,
            "slot": "613",
            "type": "t_address",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:84"
          },
          {
            "label": "feeRecipient",
            "offset": 0,
            "slot": "614",
            "type": "t_address",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:85"
          },
          {
            "label": "proposals",
            "offset": 0,
            "slot": "615",
            "type": "t_mapping(t_uint256,t_struct(Proposal)45639_storage)",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:94"
          },
          {
            "label": "hasVoted",
            "offset": 0,
            "slot": "616",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:95"
          },
          {
            "label": "proposalCount",
            "offset": 0,
            "slot": "617",
            "type": "t_uint256",
            "contract": "ARCxV2Enhanced",
            "src": "contracts\\tokens\\arc-x\\ARCxV2.sol:96"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Checkpoint)2558_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(Stake)45618_storage)dyn_storage": {
            "label": "struct ARCxV2Enhanced.Stake[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)2558_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_array(t_struct(Stake)45618_storage)dyn_storage)": {
            "label": "mapping(address => struct ARCxV2Enhanced.Stake[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)5881_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserData)45596_storage)": {
            "label": "mapping(address => struct ARCxV2Enhanced.UserData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Proposal)45639_storage)": {
            "label": "mapping(uint256 => struct ARCxV2Enhanced.Proposal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Checkpoint)2558_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "votes",
                "type": "t_uint224",
                "offset": 4,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Config)45584_storage": {
            "label": "struct ARCxV2Enhanced.Config",
            "members": [
              {
                "label": "baseYieldRate",
                "type": "t_uint96",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "flashLoanFee",
                "type": "t_uint96",
                "offset": 12,
                "slot": "0"
              },
              {
                "label": "lastUpdate",
                "type": "t_uint64",
                "offset": 24,
                "slot": "0"
              },
              {
                "label": "transferFee",
                "type": "t_uint96",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "burnRate",
                "type": "t_uint96",
                "offset": 12,
                "slot": "1"
              },
              {
                "label": "votingPeriod",
                "type": "t_uint64",
                "offset": 24,
                "slot": "1"
              },
              {
                "label": "yieldEnabled",
                "type": "t_bool",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "flashEnabled",
                "type": "t_bool",
                "offset": 1,
                "slot": "2"
              },
              {
                "label": "migrationEnabled",
                "type": "t_bool",
                "offset": 2,
                "slot": "2"
              },
              {
                "label": "burnEnabled",
                "type": "t_bool",
                "offset": 3,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Counter)5881_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Proposal)45639_storage": {
            "label": "struct ARCxV2Enhanced.Proposal",
            "members": [
              {
                "label": "votesFor",
                "type": "t_uint128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "votesAgainst",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "endTime",
                "type": "t_uint64",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)23_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Stake)45618_storage": {
            "label": "struct ARCxV2Enhanced.Stake",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockTime",
                "type": "t_uint64",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "multiplier",
                "type": "t_uint32",
                "offset": 24,
                "slot": "0"
              },
              {
                "label": "tierBonus",
                "type": "t_uint32",
                "offset": 28,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(UserData)45596_storage": {
            "label": "struct ARCxV2Enhanced.UserData",
            "members": [
              {
                "label": "yieldBalance",
                "type": "t_uint128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastClaim",
                "type": "t_uint64",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "tierLevel",
                "type": "t_uint32",
                "offset": 24,
                "slot": "0"
              },
              {
                "label": "loyaltyPoints",
                "type": "t_uint32",
                "offset": 28,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint224": {
            "label": "uint224",
            "numberOfBytes": "28"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_uint96": {
            "label": "uint96",
            "numberOfBytes": "12"
          }
        },
        "namespaces": {}
      }
    }
  }
}
